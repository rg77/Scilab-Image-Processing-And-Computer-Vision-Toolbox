function output_image = textureFlattening(src,mask,low_threshold,high_threshold, kernel_size)
//By retaining only the gradients at edge locations, before integrating with the Poisson solver, 
//one washes out the texture of the selected region, giving its contents a flat aspect. Here Canny Edge Detector is used.
//
// Calling Sequence
//  src = imread("image-location-for-src");
//  mask = imread("image-location-for-mask");
//  outputImage = seamlessClone(src,mask,low_threshold,high_threshold, kernel_size); 
//
// Parameters
// outputImage: resultant Output image 
//src	Input 8-bit 3-channel image.
//mask	Input 8-bit 1 or 3-channel image.
//low_threshold	Range from 0 to 100.
//high_threshold	Value > 100.
//kernel_size	The size of the Sobel kernel to be used.
//  
//
//Note
// The algorithm assumes that the color of the source image is close to that of the destination. 
//This assumption means that when the colors don't match, the source image color gets tinted toward the color of the destination image.
//
// Examples
// 
// src = imread("../images/1.jpg");
// mask = imread("../images/2.jpg");
// outputImage = textureFlattening(src,mask,50,150, 5 ) 
//
// Authors
//  Rohan Gurve
	
	[lhs rhs]=argn(0);
    if rhs>5
        error(msprintf(" Too many input arguments"));
    elseif rhs<5
        error(msprintf("input arguments missing"));
    end
    
    if lhs>1
	    error(msprintf("Too many output arguments"));
	end
	
	image_list1 = mattolist(src);
	image_list2 = mattolist(mask);
	
	out = raw_textureFlattening(image_list1,image_list2,low_threshold,high_threshold, kernel_size);
	
	sz = size(out);
	
	for i=1:sz
		output_image(:, :, i) = out(i)
	end
	
endfunction


